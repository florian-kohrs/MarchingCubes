#pragma kernel Density
#include "/Includes/Noise.compute"
#include "/Includes/Splines.compute"

static const int numThreads = 8;

// Noise settings
StructuredBuffer<float3> octaveOffsets;


int octaves;
float lacunarity;
float persistence;
float noiseScale;
float amplitude;
float scale;
float radius;

RWStructuredBuffer<float> points;
int numPointsPerAxis;
float3 anchor;
float3 center;
float3 offset;
float spacing;


int indexFromCoord(uint x, uint y, uint z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}



[numthreads(numThreads,numThreads,numThreads)]
void Density (int3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }
    //center is center of chunk, bound size is terrain size

    float3 pos = anchor + id * spacing;

    float noise = radius - length(pos);

    float frequency = noiseScale / 100;
    float localAmplitude = amplitude;

  /*  float lengthPos = length(pos);

    float originalNoise = radius - lengthPos;

    float caveBeginHeight = radius - 80;
    float caveEndHeight = caveBeginHeight - 30;
    float noise;*/

    //if (lengthPos > radius)
    //    noise = originalNoise;
    //else if (lengthPos > caveBeginHeight)
    //    noise = min(originalNoise, lengthPos - caveBeginHeight);
    //else if (lengthPos > caveEndHeight) {
    //    noise = min(caveBeginHeight - lengthPos, lengthPos - caveEndHeight);
    //    localAmplitude /= 2;
    //}
    //else
    //    noise = (caveEndHeight - lengthPos);




    for (int j =0; j < octaves; j ++) {
        float n = snoise((pos * frequency) / scale + octaveOffsets[j] + offset);
        n *= localAmplitude;

        noise += n;

        localAmplitude *= persistence;
        frequency *= lacunarity;
    }

    int index = indexFromCoord(id.x, id.y, id.z);
    if (noise < -2)
        noise = -2;
    else if (noise > 2)
        noise = 2;

    points[index] = noise;
    
}
