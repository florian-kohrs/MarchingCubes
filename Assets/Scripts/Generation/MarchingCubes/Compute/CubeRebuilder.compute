#pragma kernel CubeRebuilder
#include "/Includes/MarchTables.compute"
#include "/Includes/BiomVisualizationData.compute"
#include "/Includes/Bioms.compute"

#define PI 3.14159265358979323846

static const int numThreads = 4;

struct Triangle
{
	float3 vertexC;
	float3 vertexB;
	float3 vertexA;
	uint cubeData;
	uint colorAndSteepness;
};

struct Vertex
{
	float3 pos;
	uint colorAndSteepness;
};


AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float> points;
RWStructuredBuffer<BiomVisualizationData> biomsViz;

int minSteepness;
int maxSteepness;
 
float3 anchor;
float spacing;
int numPointsPerAxis;
float surfaceLevel;

float3 start;
float3 editPoint;
float3 end;
float sqrRebuildRadius;

float3 interpolateVerts(float4 v1, float4 v2)
{
	//return v1.xyz + 0.5 * (v2.xyz - v1.xyz);
	float t = (surfaceLevel - v1.w) / (v2.w - v1.w);
	return v1.xyz + t * (v2.xyz - v1.xyz);
}

//TODO:Compare speed replacing all ints with uints
int indexFromCoord(int x, int y, int z)
{
	return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}


int zipData(int x, int y, int z, int w) {
	return (x << 24) + (y << 16) + (z << 8) + w;
}

//int angle(int3 a, int3 b) 
//{
//    return acos(dot(a, b)) * 180 / PI
//}

float4 GetHeightDataFrom(int x, int y, int z)
{
	float3 f3 = float3(x, y, z);
	int index = indexFromCoord(x, y, z);

	return float4(anchor + f3 * spacing, points[index]);
}


//check for speed when having 5 times as many threads on z axis one for each triangle (prob. dumb idea)
[numthreads(numThreads, numThreads, numThreads)]
void CubeRebuilder(int3 id : SV_DispatchThreadID)
{
	id = id + (int3)start; 
	// Stop one point before the end because voxel includes neighbouring points
	if (id.x < 0 || id.x > end.x
		|| id.y < 0 || id.y > end.y 
		||  id.z < 0 || id.z > end.z)
	{
		return;
	}
	float3 dist = id - editPoint;
	float sqrLength = dist.x * dist.x + dist.y * dist.y + dist.z * dist.z;
	if(sqrLength > sqrRebuildRadius)
	{
		return;
	}

	float rad = 180 / PI;

	// 8 corners of the current cube
	float4 cubeCorners[8] =
	{
		GetHeightDataFrom(id.x, id.y, id.z),
		GetHeightDataFrom(id.x + 1, id.y, id.z),
		GetHeightDataFrom(id.x + 1, id.y, id.z + 1),
		GetHeightDataFrom(id.x, id.y, id.z + 1),
		GetHeightDataFrom(id.x, id.y + 1, id.z),
		GetHeightDataFrom(id.x + 1, id.y + 1, id.z),
		GetHeightDataFrom(id.x + 1, id.y + 1, id.z + 1),
		GetHeightDataFrom(id.x, id.y + 1, id.z + 1)
	};

	// Calculate unique index for each cube configuration.
	// There are 256 possible values
	// A value of 0 means cube is entirely inside surface; 255 entirely outside.
	// The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
	int cubeIndex = 0;
	
	if (cubeCorners[0].w < surfaceLevel) cubeIndex |= 1;
	if (cubeCorners[1].w < surfaceLevel) cubeIndex |= 2;
	if (cubeCorners[2].w < surfaceLevel) cubeIndex |= 4;
	if (cubeCorners[3].w < surfaceLevel) cubeIndex |= 8;
	if (cubeCorners[4].w < surfaceLevel) cubeIndex |= 16;
	if (cubeCorners[5].w < surfaceLevel) cubeIndex |= 32;
	if (cubeCorners[6].w < surfaceLevel) cubeIndex |= 64;
	if (cubeCorners[7].w < surfaceLevel) cubeIndex |= 128;

	int zipedCubeData = zipData(id.x, id.y, id.z, cubeIndex);

	float3 pos = anchor + id * spacing;
	int3 biomEvaluationPos = GetBiomEvaluationPosition(pos);
	uint biomIndex = GetClosestBiomIndex(biomEvaluationPos);

	BiomVisualizationData biom = biomsViz[biomIndex];

	// Create triangles for current cube configuration
	for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3)
	{
		// Get indices of corner points A and B for each of the three edges
		// of the cube that need to be joined to form the triangle.
		int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
		int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

		int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
		int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

		int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
		int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

		Triangle tri;
		tri.cubeData = zipedCubeData;
		tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
		tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
		tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);

		float3 normal = normalize(cross(tri.vertexB - tri.vertexA, tri.vertexC - tri.vertexA));
		float3 middlePoint = (tri.vertexA + tri.vertexB + tri.vertexC) / 3;
		float angleFromCenter = 180 - (acos(dot(normal, normalize(middlePoint))) * rad);

		float invLerp = (angleFromCenter - minSteepness) / (maxSteepness - minSteepness);
		if (invLerp < 0)
			invLerp = 0;
		else if (invLerp > 1)
			invLerp = 1; 

		
		
		uint3 flatColor = biom.flatRGB;
		uint3 steepColor = biom.steepRGB;
		
		int colorR = (invLerp * steepColor.x + (1 - invLerp) * flatColor.x);
		int colorG = (invLerp * steepColor.y + (1 - invLerp) * flatColor.y);
		int colorB = (invLerp * steepColor.z + (1 - invLerp) * flatColor.z);
		
		tri.colorAndSteepness = zipData((int)angleFromCenter, colorB, colorG, colorR);
		//tri.colorAndSteepness = zipData(0,0,0, spacing);
		triangles.Append(tri);
	}


}
