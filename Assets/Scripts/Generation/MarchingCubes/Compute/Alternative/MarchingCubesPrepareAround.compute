#pragma kernel MarchPrepareAround
#include "../Includes/MarchTables.compute"
#include "Assets/Scripts/ComputeIncludes/ZipData.compute"

#define PI 3.14159265358979323846
#define SURFACE_LEVEL 0

#define DEFAULT_NUM_POINTS_PER_AXIS 33

static const int numThreads = 4;

static const int SQR_NUM_POINTS_PER_AXIS = DEFAULT_NUM_POINTS_PER_AXIS * DEFAULT_NUM_POINTS_PER_AXIS;

AppendStructuredBuffer<int2> triangleLocations;
RWStructuredBuffer<float> points;

float3 start;
float3 editPoint;
float3 end;
float sqrRebuildRadius;

int indexFromCoord(int x, int y, int z)
{
	return z * DEFAULT_NUM_POINTS_PER_AXIS + y * DEFAULT_NUM_POINTS_PER_AXIS + x;
}


float GetHeightDataFrom(int x, int y, int z)
{
	return points[indexFromCoord(x, y, z)];
}


[numthreads(numThreads, numThreads, numThreads)]
void MarchPrepareAround(uint3 id : SV_DispatchThreadID)
{
	id = id + (int3)start;
	if (id.x < 0 || id.x > end.x
		|| id.y < 0 || id.y > end.y
		|| id.z < 0 || id.z > end.z)
	{
		return;
	}
	float3 dist = id - editPoint;
	float sqrLength = dist.x * dist.x + dist.y * dist.y + dist.z * dist.z;
	if (sqrLength > sqrRebuildRadius)
	{
		return;
	}

	int cubeIndex = 0;

	cubeIndex |= (GetHeightDataFrom(id.x, id.y, id.z) < SURFACE_LEVEL) * 1;
	cubeIndex |= (GetHeightDataFrom(id.x + 1, id.y, id.z) < SURFACE_LEVEL) * 2;
	cubeIndex |= (GetHeightDataFrom(id.x + 1, id.y, id.z + 1) < SURFACE_LEVEL) * 4;
	cubeIndex |= (GetHeightDataFrom(id.x, id.y, id.z + 1) < SURFACE_LEVEL) * 8;
	cubeIndex |= (GetHeightDataFrom(id.x, id.y + 1, id.z) < SURFACE_LEVEL) * 16;
	cubeIndex |= (GetHeightDataFrom(id.x + 1, id.y + 1, id.z) < SURFACE_LEVEL) * 32;
	cubeIndex |= (GetHeightDataFrom(id.x + 1, id.y + 1, id.z + 1) < SURFACE_LEVEL) * 64;
	cubeIndex |= (GetHeightDataFrom(id.x, id.y + 1, id.z + 1) < SURFACE_LEVEL) * 128;

	int triangulationAtIndex[] = triangulation[cubeIndex];
	int zippedCubeData = zipData(id.x, id.y, id.z, cubeIndex);
	// Create triangleLocations for current cube configuration
	for (int i = 0; triangulationAtIndex[i] != -1; i += 3)
	{
		int2 zipedCubeData = int2(zippedCubeData, i);
		triangleLocations.Append(zipedCubeData);
	}


}
