#pragma kernel MarchPrepare
#include "../Includes/MarchTables.compute"
#include "../Includes/BiomVisualizationData.compute"
#include "../Includes/Bioms.compute"
#include "Assets/Scripts/ComputeIncludes/ZipData.compute"

#define PI 3.14159265358979323846
#define SURFACE_LEVEL 0

static const int numThreads = 4;

AppendStructuredBuffer<int2> triangles;
RWStructuredBuffer<float> points;

int numPointsPerAxis;

int indexFromCoord(int x, int y, int z)
{
	return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}


float GetHeightDataFrom(int x, int y, int z)
{
	return points[indexFromCoord(x, y, z)];
}


[numthreads(numThreads, numThreads, numThreads)]
void MarchPrepare(uint3 id : SV_DispatchThreadID)
{

	int cubeIndex = 0;

	cubeIndex |= (GetHeightDataFrom(id.x, id.y, id.z) < SURFACE_LEVEL) * 1;
	cubeIndex |= (GetHeightDataFrom(id.x + 1, id.y, id.z) < SURFACE_LEVEL) * 2;
	cubeIndex |= (GetHeightDataFrom(id.x + 1, id.y, id.z + 1) < SURFACE_LEVEL) * 4;
	cubeIndex |= (GetHeightDataFrom(id.x, id.y, id.z + 1) < SURFACE_LEVEL) * 8;
	cubeIndex |= (GetHeightDataFrom(id.x, id.y + 1, id.z) < SURFACE_LEVEL) * 16;
	cubeIndex |= (GetHeightDataFrom(id.x + 1, id.y + 1, id.z) < SURFACE_LEVEL) * 32;
	cubeIndex |= (GetHeightDataFrom(id.x + 1, id.y + 1, id.z + 1) < SURFACE_LEVEL) * 64;
	cubeIndex |= (GetHeightDataFrom(id.x, id.y + 1, id.z + 1) < SURFACE_LEVEL) * 128;

	int triangulationAtIndex[] = triangulation[cubeIndex];
	int zippedCubeData = zipData(id.x, id.y, id.z, cubeIndex);
	// Create triangles for current cube configuration
	for (int i = 0; triangulationAtIndex[i] != -1; i += 3)
	{
		int2 zipedCubeData = int2(zippedCubeData, i);
		triangles.Append(zipedCubeData);
	}


}
