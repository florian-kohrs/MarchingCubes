#pragma kernel ChunkDataFromPrepared
#include "/Includes/BaseMarchingCubes.compute" 
#include "/Includes/BiomVisualizationData.compute"
#include "/Includes/Bioms.compute"

struct Triangle
{
	float3 vertexC;
	float3 vertexB;
	float3 vertexA;
	uint cubeData;
	uint colorAndSteepness;
};


static const int WAFE_FRONT_SIZE = 32;
static const float rad = 180 / PI;


RWStructuredBuffer<int2> triangleLocations;
StructuredBuffer<BiomVisualizationData> biomsViz;
RWStructuredBuffer<float> minDegreeAtCoord;


int minSteepness;
int maxSteepness;


float3 anchor;
float spacing;
uint length;

bool storeMinDegrees;



int indexFromCoord(int x, int y, int z)
{
	return (z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x) * pointSpacing;
}


float3 interpolateVerts(float4 v1, float4 v2)
{
	//return v1.xyz + 0.5 * (v2.xyz - v1.xyz);
	float t = (-v1.w) / (v2.w - v1.w);
	return v1.xyz + t * (v2.xyz - v1.xyz);
}


//int angle(int3 a, int3 b)
//{
//    return acos(dot(a, b)) * 180 / PI
//}

float4 GetHeightDataFrom(int x, int y, int z)
{
	float3 f3 = float3(x, y, z);
	int index = indexFromCoord(x, y, z);

	return float4(anchor + f3 * spacing, points[index]);
}


Triangle GetTriangleFromThreadId(uint3 id)
{

	int2 buildThis = triangleLocations[id.x];
	int zipedCubeData = buildThis.x;
	int4 data = unzipData(zipedCubeData);
	id = uint3(data.x, data.y, data.z);
	int cubeIndex = data.w;
	int triIndex = buildThis.y;

	// 8 corners of the current cube
	float4 cubeCorners[8] =
	{
		GetHeightDataFrom(id.x, id.y, id.z),
		GetHeightDataFrom(id.x + 1, id.y, id.z),
		GetHeightDataFrom(id.x + 1, id.y, id.z + 1),
		GetHeightDataFrom(id.x, id.y, id.z + 1),
		GetHeightDataFrom(id.x, id.y + 1, id.z),
		GetHeightDataFrom(id.x + 1, id.y + 1, id.z),
		GetHeightDataFrom(id.x + 1, id.y + 1, id.z + 1),
		GetHeightDataFrom(id.x, id.y + 1, id.z + 1)
	};

	float3 pos = cubeCorners[0].xyz;
	int3 biomEvaluationPos = GetBiomEvaluationPosition(pos);
	uint biomIndex = GetClosestBiomIndex(biomEvaluationPos);

	int index = indexFromCoord(id.x, id.y, id.z);

	BiomVisualizationData biom = biomsViz[biomIndex];

	int triangulationAtIndex[] = triangulation[cubeIndex];

	// Create triangles for current cube configuration


	// Get indices of corner points A and B for each of the three edges
	// of the cube that need to be joined to form the triangle.
	int a0 = cornerIndexAFromEdge[triangulationAtIndex[triIndex]];
	int b0 = cornerIndexBFromEdge[triangulationAtIndex[triIndex]];

	int a1 = cornerIndexAFromEdge[triangulationAtIndex[triIndex + 1]];
	int b1 = cornerIndexBFromEdge[triangulationAtIndex[triIndex + 1]];

	int a2 = cornerIndexAFromEdge[triangulationAtIndex[triIndex + 2]];
	int b2 = cornerIndexBFromEdge[triangulationAtIndex[triIndex + 2]];

	Triangle tri;
	tri.cubeData = zipedCubeData;
	tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
	tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
	tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);

	float3 normal = normalize(cross(tri.vertexB - tri.vertexA, tri.vertexC - tri.vertexA));
	float3 middlePoint = (tri.vertexA + tri.vertexB + tri.vertexC) / 3;
	float angleFromCenter = 180 - (acos(dot(normal, normalize(middlePoint))) * rad);

	//TODO: Remove condition and see if its faster?
	if (storeMinDegrees)
	{
		minDegreeAtCoord[index] = angleFromCenter;
	}

	float invLerp = (angleFromCenter - minSteepness) / (maxSteepness - minSteepness);
	if (invLerp < 0)
		invLerp = 0;
	else if (invLerp > 1)
		invLerp = 1;

	uint3 flatColor = biom.flatRGB;
	uint3 steepColor = biom.steepRGB;

	int colorR = (invLerp * steepColor.x + (1 - invLerp) * flatColor.x);
	int colorG = (invLerp * steepColor.y + (1 - invLerp) * flatColor.y);
	int colorB = (invLerp * steepColor.z + (1 - invLerp) * flatColor.z);

	tri.colorAndSteepness = zipData((int)angleFromCenter, colorB, colorG, colorR);
	//tri.colorAndSteepness = 0;

	return tri;
}

RWStructuredBuffer<float3> verts;
RWStructuredBuffer<uint> colors;


//check for speed when having 5 times as many threads on z axis one for each triangle -> not better
[numthreads(WAFE_FRONT_SIZE, 1, 1)]
void ChunkDataFromPrepared(uint3 id : SV_DispatchThreadID)
{
	uint threadXID = id.x;
	if (threadXID >= length)
		return;

	Triangle t = GetTriangleFromThreadId(id);

	int index = threadXID * 3;
	colors[index] = t.colorAndSteepness;
	colors[index+1] = t.colorAndSteepness;
	colors[index+2] = t.colorAndSteepness;

	verts[index] = t.vertexC;
	verts[index+1] = t.vertexB;
	verts[index+2] = t.vertexA;
}