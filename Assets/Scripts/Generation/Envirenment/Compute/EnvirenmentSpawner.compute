#pragma kernel EnvirenmentSpawner

#include "/Includes/InstanceProperty.compute"
#include "/Includes/Triangle.compute"
#include "/Includes/Noise.compute"

#define PI 3.14159265358979323846
#define DegToRad 0.0174532924

static const int threadGroupSizeX = 64;

static const float grassScale = 0.4;
static const float grassDensitiyPerSquareMeter = 5;

AppendStructuredBuffer<InstanceProperty> grassPositions;
StructuredBuffer<float> points;
float3 offset;
float boundsHeight;
uint length;


int3 anchorPosition;


/// <summary>
/// entry above 0 means that a tree is planned. value 1-4 gives width of tree
/// </summary>
groupshared uint data[threadGroupSizeX];


float rand(Triangle t, float seed)
{
    float m = abs(t.vertexA.x) * (abs(t.vertexB.y) * seed) + abs(t.vertexC.z);
    return (m - (int)m);
}


///have each thread work on a chunk of the chunk
[numthreads(threadGroupSizeX, 1, 1)]
void EnvirenmentSpawner(uint3 id : SV_DispatchThreadID)
{
    
    //determine what to place on this cubeentity

    GroupMemoryBarrierWithGroupSync();

}
