#pragma kernel EnvironmentPlacer
#include "Assets/Scripts/ComputeIncludes/NoiseFiles/Noise.compute"
#include "Assets/Scripts/ComputeIncludes/ZipData.compute"

#define PI 3.14159265358979323846
#define DegToRad 0.0174532924

static const int THREAD_GROUP_SIZE = 32;


struct Transform
{
	float4x4 transform;

};

StructuredBuffer<int> entitiesAtCube;
RWStructuredBuffer<Transform> entityTransform;
//EntityIndexPropertyLookUp



int3 anchorPosition;
int length;




[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void EnvironmentPlacer(uint3 id : SV_DispatchThreadID/*, uint groupIndex : SV_GroupIndex*/)
{
	if (id.x >= length)
		return;

	int4 entitiy = unzipData(entitiesAtCube[id.x]);

	//TODO: spawn trees for lod of 2

	float averageTreesPerSqrMeter = 0.1f;
	float treeChance = Noise01(id);

	if (treeChance < averageTreesPerSqrMeter) 
	{
		int entityType = 0;
		int entityData = zipInFront(entityType, index);

		entitiesAtCube.Append(0);
		minAngleAtCubeIndex[index] = 0;
	}


	/*GroupMemoryBarrierWithGroupSync();
	for (size_t x = -MIN_TREE_DISTANCE; x <= MIN_TREE_DISTANCE; x++)
	{
		for (size_t y = -MIN_TREE_DISTANCE; y <= MIN_TREE_DISTANCE; y++)
		{
			for (size_t z = -MIN_TREE_DISTANCE; z <= MIN_TREE_DISTANCE; z++)
			{
				int3 newCoord = coord + int3(x, y, z);
				if(newCoord != coord && data[newCoord])
			}
		}
	}*/
}
