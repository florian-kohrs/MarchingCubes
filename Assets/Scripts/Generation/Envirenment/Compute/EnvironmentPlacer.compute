#pragma kernel EnvironmentPlacer
#include "Assets/Scripts/ComputeIncludes/NoiseFiles/Noise.compute"
#include "Assets/Scripts/ComputeIncludes/ZipData.compute"
#include "Assets/Scripts/ComputeIncludes/TransformBuilder.compute"

#define PI 3.14159265358979323846
#define DegToRad 0.0174532924

static const int THREAD_GROUP_SIZE = 32;


struct Transform
{
	float4x4 transform;
};


StructuredBuffer<int> entitiesAtCube;
RWStructuredBuffer<Transform> entityTransform;
int length;
//EntityIndexPropertyLookUp

int3 anchorPosition;



[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void EnvironmentPlacer(uint3 id : SV_DispatchThreadID/*, uint groupIndex : SV_GroupIndex*/)
{
	if (id.x >= length)
		return;

	int4 entity = unzipData(entitiesAtCube[id.x]);
	int3 cubeIndex = int3(entity.y, entity.z, entity.w);

	float3 normal = anchorPosition + cubeIndex;
	float3 normalizedNormal = normalize(normal);
	float3 position = normal - normalizedNormal;
	float angle = Noise01(normal) * 360;
	float scale = 0.75;// +Noise01(normal + anchorPosition);
	Transform t;
	t.transform = GetMatrixFor(angle, normalizedNormal, position, scale);
	entityTransform[id.x] = t;
}
