#pragma kernel GrassSpawner

#include "/Includes/InstanceProperty.compute"
#include "/Includes/Triangle.compute"
#include "Assets/Scripts/ComputeIncludes/NoiseFiles/Noise.compute"
#include "Assets/Scripts/ComputeIncludes/ZipData.compute"
#include "Assets/Scripts/ComputeIncludes/TransformBuilder.compute"

#define PI 3.14159265358979323846
#define DegToRad 0.0174532924

static const float GRASS_SCALE = 0.2;
static const float grassDensitiyPerSquareMeter = 5;
static const int NUM_VOXELS_PER_AXIS = 32;


AppendStructuredBuffer<InstanceProperty> grassPositions;
StructuredBuffer<Triangle> meshTriangles;
//StructuredBuffer<float> canHaveGrassAtCoord;
float3 offset;
float boundsHeight;
uint length;


int3 anchorPosition;

//TODO: For cheap and acceptable random solition have a noise 3d texture and read value from coordinate


//float4x4 LookAtRotation(float3 from, float to)
//{
//    float3 dotDir = dot(x, n);
//    float angle = acos(normalize(dotDir));
//
//    float normal = normalize(cross(x, n));
//}

int indexFromCoord(int x, int y, int z)
{
    return z * NUM_VOXELS_PER_AXIS * NUM_VOXELS_PER_AXIS + y * NUM_VOXELS_PER_AXIS + x;
}



uint steepness(Triangle t)
{
    return t.colorAndSteepness >> 24;
}

float sizeOfTriangle(float3 n1, float3 n2, float3 n3)
{
    float res = pow(((n2.x * n1.y) - (n3.x * n1.y) - (n1.x * n2.y) + (n3.x * n2.y) + (n1.x * n3.y) - (n2.x * n3.y)), 2.);
    res += pow(((n2.x * n1.z) - (n3.x * n1.z) - (n1.x * n2.z) + (n3.x * n2.z) + (n1.x * n3.z) - (n2.x * n3.z)), 2);
    res += pow(((n2.y * n1.z) - (n3.y * n1.z) - (n1.y * n2.z) + (n3.y * n2.z) + (n1.y * n3.z) - (n2.y * n3.z)), 2);
    return sqrt(res) * 0.5f;
}


float rand(Triangle t, float seed)
{
    float m = abs(t.vertexA.x) * (abs(t.vertexB.y) * seed) + abs(t.vertexC.z);
    return (m - (int)m);
}

int GetNumberOfGrass(Triangle t, float seed)
{
    float size = sizeOfTriangle(t.vertexA, t.vertexB, t.vertexC);
    float expectedGrass = grassDensitiyPerSquareMeter * size;
    int grass = expectedGrass;
    float extraGrass = rand(t, seed);
    extraGrass = (extraGrass - 0.5) * 2;
    return grass + extraGrass;
}

float4 GetPositionOfGrass(Triangle t, uint number, float seed, float3 offset)
{
    float a1 = rand(t, seed);
    float rest = 1 - a1;
    float a2 = rand(t, seed) * rest;
    rest -= a2;
    int mod = number % 3;
    float nextSeed = seed * (1+number) / (mod + 1);
    if(mod == 1)
        return float4((t.vertexA * a1 + t.vertexB * a2 + t.vertexC * rest) - offset, nextSeed);
    else if(mod == 2)
        return float4((t.vertexB * a1 + t.vertexC * a2 + t.vertexA * rest) - offset, nextSeed);
    else
        return float4((t.vertexC * a1 + t.vertexA * a2 + t.vertexB * rest) - offset, nextSeed);
}

//TODO: Set grass per area not per tri
//TODO: randomize rotation about normal axis (see axis angle)

float3 GetNormal(Triangle t)
{
    return normalize(cross(t.vertexC - t.vertexA, t.vertexB - t.vertexA));
}


float3 GetOffset(float3 normal, float grassScale)
{
    return offset - normal * grassScale * boundsHeight;
}

float GetGrassScale(Triangle t, float seed)
{
    float scale = rand(t, seed);
    scale = sin(scale * PI);
    return (1 + scale) * GRASS_SCALE;
}

float3 GetColor(Triangle t, float seed)
{
    float a = rand(t, seed);
    //return  a * float3(0.6, 0.6, 0.6) + (1 - a) * float3(0.9, 0.9, 0.9);
    return  a * float3(0.29, 0.8, 0) + (1 - a) * float3(0.59, 0.29, 0);
}

[numthreads(32,1,1)]
void GrassSpawner(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= length)
        return;

    Triangle t = meshTriangles[id.x];
    int3 cubeIndex = unzipData3(t.cubeData);
    int index = indexFromCoord(cubeIndex.x, cubeIndex.y, cubeIndex.z);
    if (steepness(t) > 45/* || canHaveGrassAtCoord[index] == 0*/)
        return;

    float seed = PI; //PI* id.x / (PI + id.y + id.z);
    int amount = GetNumberOfGrass(t, seed);
    float3 normal = GetNormal(t);

    float angle = rand(t, 1) * 360;
    float4x4 instanceMatrix = GetEulerMatrixFor(angle, normal);

    for (int i = 0; i < amount; i++)
    {
        InstanceProperty grass;
        float scale = GetGrassScale(t, seed);
        float3 offset = GetOffset(normal, scale);
        float4 posAndSeed = GetPositionOfGrass(t, i, seed, offset);
        seed = posAndSeed.w;
        grass.color = GetColor(t, seed);
        grass.transform = SetPosAndScaleInMatrix(instanceMatrix, (float3)posAndSeed, scale);
        grassPositions.Append(grass); 
    }

}
